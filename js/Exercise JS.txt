1.  var y = '';
    for (x = 0; x <= 6; x++) {
        y = y + '#';
        console.log(y);
    }
    ==========================
    for (var x = "#"; x.length < 8; x += "#"){
        console.log(x);
    }

2.  var y = 0;
    for (x = 1; x <= 100; x++) {
        y = y + 1;
        if( y%3 == 0 && y%5 !== 0){
            console.log('Fizz');
        }
        else if(y%5 == 0 && y%3 !== 0){
            console.log('Buzz');
        }
        else if(y%3 == 0 && y%5 == 0){
            console.log('FizzBuzz');
        }
        else{
            console.log(y);
        }
    }
    ==========================
    for (var n = 1; n <= 100; n++) {
      var output = "";
      if (n % 3 == 0)
        output += "Fizz";
      if (n % 5 == 0)
        output += "Buzz";
      console.log(output || n);
    }

3.  ---
    ========================
Функции:
-------
1.
    function funcRange(a,b,c){
        if(!c){
            c = 1;
        }
        var myArray = [];
        for (i=a; i<=b; i++){
            if(a <= b){
                myArray.push(a);
            }
            a = a + c;
        }
        return myArray;
    }
    function funcSum(array){
        var sum = 0;
        for (i=0; i<array.length; i++){
            sum += array[i];
        }
        return sum;
    }
    console.log(funcSum(funcRange(1, 10, 2)));  ---> 25 ( сумма с 1, 3, 5, 7, 9 )
    ==================================================================

Функции высшего порядка:
-----------------------
1. варианты a и b дают идентичный результат

    var array = [[1, 2, 3], [4, 5], [6]];

    a)  function concatArrays(array) {
          return array.reduce(function(a, b){
              return a.concat(b);
          });
        }

    b)  var concatArrays = array.reduce(function(a, b){
          return a.concat(b);
        });

        console.log( concatArrays(array), concatArrays );    // --> [1,2,3,4,5,6]
    =====================================================================
    console.log( array.reduce(function(flat, current) {
        return flat.concat(current);
    }, []) );

Тайная жизнь обьектов:
---------------------
1. function Vector(x, y){    // конструктор Vector, с определением свойств.
       this.x = x;           // this.x берется с аргумента X, у каждой функ значение свое.
       this.y = y;
   }
   Vector.prototype.plus = function(move) {    // добавляем метод plus обьектам созданным конструктором Vector через свойство prototype
       sumVector = new Vector(                 // создание нового обьекта sumVector с новыми координатами
           this.x + move.x,                    // где move.x
           this.y + move.y
       );
       return sumVector;                       // возвращаем функции новый обьект с новыми парам.
   };
   var vectorBase = new Vector(1, 2);          // оба обьекты созданы конструктором Vector и принимают эго свойства
   var vectorMove = new Vector(2, 3);

   console.log( vectorBase.plus(vectorMove) );    // Vector { x=3,  y=5,  plus=function()}
   ========================================================================
   function Vector(x, y) {
     this.x = x;
     this.y = y;
   }
   Vector.prototype.plus = function(other) {
     return new Vector(this.x + other.x, this.y + other.y);
   };
   Vector.prototype.minus = function(other) {
     return new Vector(this.x - other.x, this.y - other.y);
   };
   Object.defineProperty(Vector.prototype, "length", {
     get: function() {
       return Math.sqrt(this.x * this.x + this.y * this.y);
     }
   });
   console.log(new Vector(1, 2).plus(new Vector(2, 3)));
   // → Vector{x: 3, y: 5}
   console.log(new Vector(1, 2).minus(new Vector(2, 3)));
   // → Vector{x: -1, y: -1}
   console.log(new Vector(3, 4).length);
   // → 5


Ошибки:
------
1.
    function MultiplicatorUnitFailure(message) {
            this.message = message;
    }
    MultiplicatorUnitFailure.prototype = Object.create(Error.prototype);

    function primitiveMultiply(a, b) {
        if (Math.random() < 0.5){
            return a * b;
        }
        else{
            throw new MultiplicatorUnitFailure();                   // ловит ошибки
        }

    }
    function reliableMultiply(a, b) {
        for(;;){                                                    // вечный цикл
            try{                                                    // он будет запускать функ primitiveMultiply();
                return primitiveMultiply(a, b);                     // пока не пройдет валидный результат 64, а не ошибка
            }
            catch(error){                                           // перехват ошибки, и проверка ее
                if( !(error instanceof MultiplicatorUnitFailure) ){ // если ошибка не из класса MultiplicatorUnitFailure (другая любая ошибка)
                    throw error;                                    // показать ошибку
                }                                                   // в противном случае игнорировать ее и продолжить цикл
            }
        }
    }
    console.log(reliableMultiply(8, 8));    // → 64
    ====================================================================
    function reliableMultiply(a, b) {
        for(;;){
            try{
                return primitiveMultiply(a, b);
            }
            catch(e){
                if( !(e instanceof MultiplicatorUnitFailure) ){
                    throw e;
                }
            }
        }
    }


Модули:
------
1.
================================================================================================================================================
    var month = function() {
         var names = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
         return {
             name: function(number) {
             return names[number];
             },
             number: function(name) {
             return names.indexOf(name);
             }
         };
     }();
     console.log(month.name(2));               // → March
     console.log(month.number("November"));    // → 10// создание и авто вызов безымянной функции
